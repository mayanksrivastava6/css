Q2. What are data types in Javascript? Explain the different types of data types with examples.

In JavaScript, data types represent the kind of value a variable can hold. JavaScript is a dynamically typed language, meaning you don't have to specify the data type when declaring a variable. The type is determined automatically based on the value assigned to it.
JavaScript Data Types

JavaScript data types are divided into two categories:

    Primitive Data Types
    Non-Primitive (Reference) Data Types

1. Primitive Data Types

These are the most basic data types, which hold a single value. JavaScript has the following primitive data types:

    Number
    String
    Boolean
    Undefined
    Null
    Symbol (added in ES6)
    BigInt (added in ES11)

a. Number

Represents numeric values, including both integers and floating-point numbers.

let age = 25;          
let price = 199.99;    
console.log(typeof age);  
b. String

Represents textual data enclosed within quotes (single, double, or backticks).

let name = "Alice";
let greeting = 'Hello, World!';
let template = `Hello, ${name}!`; 
console.log(typeof name); 

c. Boolean

Represents a logical entity and can have two values: true or false.

let isAdult = true;
let hasLicense = false;
console.log(typeof isAdult);  

d. Undefined

A variable that has been declared but not assigned a value is undefined.
let x;
console.log(x);            
console.log(typeof x);  

e. Null

Represents the intentional absence of any object value. It is a primitive type but often used where objects are expected.

let user = null;
console.log(user);        
console.log(typeof user);  
f. Symbol (ES6)

Represents a unique and immutable value, often used as an identifier for object properties.

let id1 = Symbol('id');
let id2 = Symbol('id');
console.log(id1 === id2);
console.log(typeof id1);   

g. BigInt (ES11)

Used to represent integers that are too large to be represented by the Number type.

let bigInt = BigInt(123456789012345678901234567890);
console.log(bigInt);       
console.log(typeof bigInt);  

2. Non-Primitive (Reference) Data Types

These are more complex types and include objects that store collections of data or more complex entities.

    Object
    Array
    Function

a. Object

An object is a collection of properties, where each property is defined as a key-value pair. Objects can also contain methods (functions).

let person = {
  name: "John",
  age: 30,
  isAdult: true,
  greet: function() {
    console.log("Hello!");
  }
};

console.log(person.name);  
person.greet();             
console.log(typeof person); 

b. Array

An array is a special type of object that represents an ordered collection of values (elements). Arrays can store multiple values of different types.

let fruits = ["Apple", "Banana", "Mango"];
console.log(fruits[1]);        
console.log(typeof fruits);    

c. Function

Functions in JavaScript are objects, but they can be invoked. A function is a block of reusable code.

function greet() {
  return "Hello!";
}

console.log(greet());          
console.log(typeof greet);    

Type Conversion (Type Coercion)

JavaScript allows automatic type conversion (coercion) in some cases, such as adding a string and a number, where the number is converted to a string.

let num = 5;
let text = "10";
console.log(num + text);  

